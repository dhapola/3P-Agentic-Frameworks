# Usage from command line:
#   aws cloudformation create-stack --stack-name bedrock-workshop --capabilities CAPABILITY_NAMED_IAM --template-body file://cf.yml --region <<YOUR-REGION>> 
#   aws cloudformation update-stack --stack-name bedrock-workshop --capabilities CAPABILITY_NAMED_IAM --template-body file://cf.yml --region <<YOUR-REGION>> 
#   aws cloudformation delete-stack --stack-name bedrock-workshop --region <<YOUR-REGION>> 

AWSTemplateFormatVersion: '2010-09-09'
Resources:
  ### S3 Bucket
  AgentWorkshopStackS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub
        - bedrock-workshop-${postfix}
        - postfix: !Select
            - 0
            - !Split
              - '-'
              - !Select
                - 2
                - !Split
                  - /
                  - !Ref AWS::StackId
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ### VPC with two public subnets and 2 private subnets
  AgentWorkshopVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AgentWorkshopVPC
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AgentWorkshopVPC
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AgentWorkshopVPC
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AgentWorkshopVPC
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false

  ### Internet Gateway and public subnet routing
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref AgentWorkshopVPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AgentWorkshopVPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ### Security group
  AgentWorkshopSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: AgentWorkshopSecurityGroup
      GroupDescription: Self-referencing security group for Bedrock workshop
      VpcId: !Ref AgentWorkshopVPC
  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AgentWorkshopSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref AgentWorkshopSecurityGroup
  SecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref AgentWorkshopSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      CidrIp: 0.0.0.0/0

  ### NAT Gateway and private subnet routing
  NatPublicIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt NatPublicIP.AllocationId
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AgentWorkshopVPC
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  ### VPC interface endpoint to bedrocm-runtime
  BedrockInterfaceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.bedrock-runtime
      VpcId: !Ref AgentWorkshopVPC
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref AgentWorkshopSecurityGroup

  ### IAM Roles for SageMaker
  AgentWorkshopStackSageMakerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AgentWorkshopStackSageMakerRole
      Description: IAM role for SageMaker Studio.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      MaxSessionDuration: 3600
      Policies:
        - PolicyName: AgentWorkshopStackSageMakerRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                  - bedrock:ListFoundationModels
                  - bedrock:CreateKnowledgeBase
                  - bedrock:GetKnowledgeBase
                  - bedrock:CreateDataSource
                  - bedrock:GetDataSource
                  - bedrock:StartIngestionJob
                  - bedrock:GetIngestionJob
                  - bedrock:RetrieveAndGenerate
                  - bedrock:Retrieve
                  - bedrock:CreateAgent
                  - bedrock:GetAgent
                  - bedrock:PrepareAgent
                  - bedrock:ListAgentVersions
                  - bedrock:GetAgentVersion
                  - bedrock:CreateAgentAlias
                  - bedrock:GetAgentAlias
                  - bedrock:InvokeAgent
                  - bedrock:CreateAgentActionGroup
                  - bedrock:GetAgentActionGroup
                  - bedrock:AssociateAgentKnowledgeBase
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                  - lambda:AddPermission
                  - secretsmanager:GetSecretValue
                  - aoss:APIAccessAll
                  - aoss:ListCollections
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${AgentWorkshopStackS3Bucket}
                  - !Sub arn:aws:s3:::${AgentWorkshopStackS3Bucket}/*
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess

  ### IAM Roles for Bedrock Knowledge Base
  AgentWorkshopStackKnowledgeBaseRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AgentWorkshopStackKnowledgeBaseRole
      Description: IAM role for Bedrock Knowledge Base.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      MaxSessionDuration: 3600
      Policies:
        - PolicyName: AgentWorkshopStackKnowledgeBasePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: '*'
              - Effect: Allow
                Action:
                  - aoss:APIAccessAll
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource: '*'

  ### OpenSearch Serverless Collection
  WorkshopVpcEndpoint:
    Type: AWS::OpenSearchServerless::VpcEndpoint
    Properties:
      Name: workshop-vpc-endpoint
      VpcId: !Ref AgentWorkshopVPC
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !GetAtt AgentWorkshopSecurityGroup.GroupId
  WorkshopCollectionAccessPolicy:
    Type: AWS::OpenSearchServerless::AccessPolicy
    Properties:
      Name: workshop-access-policy
      Type: data
      Description: Access policy
      Policy: !Sub '[{"Description":"Access for worshop
        roles","Rules":[{"ResourceType":"index","Resource":["index/*/*"],"Permission":["aoss:*"]},
        {"ResourceType":"collection","Resource":["collection/*"],"Permission":["aoss:*"]}],
        "Principal":["arn:aws:iam::${AWS::AccountId}:role/AgentWorkshopStackSageMakerRole",
        "arn:aws:iam::${AWS::AccountId}:role/AgentWorkshopStackLambdaFunctionRole",
        "arn:aws:iam::${AWS::AccountId}:role/AgentWorkshopStackKnowledgeBaseRole"]}]'
  WorkshopNetworkPolicy:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Properties:
      Name: workshop-network-policy
      Type: network
      Description: Network policy
      Policy: !Sub '[{"Rules":[{"ResourceType":"collection","Resource":["collection/*"]},
        {"ResourceType":"dashboard","Resource":["collection/*"]}],"AllowFromPublic":false,
        "SourceVPCEs": ["${WorkshopVpcEndpoint.Id}"]},{"Rules": [{"Resource":
        ["collection/*"],"ResourceType": "collection"}],"SourceServices":
        ["bedrock.amazonaws.com"]}]      '
  WorkshopEncryptionPolicy:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Properties:
      Name: workshop-encryption-policy
      Type: encryption
      Description: Encryption policy
      Policy: '{"Rules":[{"ResourceType":"collection","Resource":["collection/*"]}],"AWSOwnedKey":true}'
  AgentWorkshopStackOpenSearchServerlessCollection:
    Type: AWS::OpenSearchServerless::Collection
    DeletionPolicy: Delete
    Properties:
      Name: bedrock-workshop-collection
      Type: VECTORSEARCH
    DependsOn: WorkshopEncryptionPolicy

  ### SageMaker Domain and user profile
  AgentWorkshopStackSageMakerDomain:
    Type: AWS::SageMaker::Domain
    Properties:
      AppNetworkAccessType: VpcOnly
      AuthMode: IAM
      DefaultUserSettings:
        ExecutionRole: !GetAtt AgentWorkshopStackSageMakerRole.Arn
        SecurityGroups:
          - !GetAtt AgentWorkshopSecurityGroup.GroupId
      DomainName: AgentWorkshop
      VpcId: !Ref AgentWorkshopVPC
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      DefaultSpaceSettings:
        ExecutionRole: !GetAtt AgentWorkshopStackSageMakerRole.Arn
        SecurityGroups:
          - !Ref AgentWorkshopSecurityGroup
  AgentWorkshopStackSageMakerUserProfile:
    Type: AWS::SageMaker::UserProfile
    Properties:
      DomainId: !Ref AgentWorkshopStackSageMakerDomain
      UserProfileName: AgentWorkshop
  AgentWorkshopStackSageMakerSpace:
    Type: AWS::SageMaker::Space
    Properties:
      DomainId: !Ref AgentWorkshopStackSageMakerDomain
      SpaceName: AgentWorkshopSpace
      SpaceSettings:
        AppType: JupyterLab
        SpaceStorageSettings:
          EbsStorageSettings:
            EbsVolumeSizeInGb: 5